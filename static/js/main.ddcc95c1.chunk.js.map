{"version":3,"sources":["components/SelectComponent/SelectComponent.js","components/InputLayout/InputLayout.js","components/Holidays/Holiday/Holiday.js","components/Holidays/Holidays.js","App.js","serviceWorker.js","index.js"],"names":["selectComponent","props","data","outputData","Date","getFullYear","i","push","key","value","map","item","split","trim","className","altClass","onChange","changed","defaultValue","InputLayout","state","countries","getCountriesError","startYear","fetch","then","response","json","countriesData","setState","catch","error","this","onClick","clicked","Component","holiday","currentYear","date","currentMonth","getMonth","font","name","localName","style","fontWeight","holidays","holidaysData","App","selectedCountry","selectedYear","getHolidaysError","selectedChangeHandler","event","target","classList","contains","getHolidaysHandler","alert","Holidays","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.ddcc95c1.chunk.js","sourcesContent":["import React from 'react';\nimport './SelectComponent.css';\n\nconst selectComponent = (props) => {\n  const data = props.data;\n  let outputData = [];\n  if (data === new Date().getFullYear()) {\n    for (let i = data - 50; i <= data + 50; i++) {\n      outputData.push(\n        <option key={i} value={i}>\n          {i}\n        </option>\n      );\n    }\n  } else {\n    outputData = data.map((item) => {\n      return (\n        <option key={item.split('-')[1]} value={item.split('-')[1].trim()}>\n          {item}\n        </option>\n      );\n    });\n  }\n\n  return (\n    <select\n      className={`SelectComponent ${props.altClass}`}\n      onChange={props.changed}\n      defaultValue={props.defaultValue}\n    >\n      <option></option>\n      {outputData}\n    </select>\n  );\n};\n\nexport default selectComponent;\n","import React, { Component } from 'react';\nimport SelectComponent from '../SelectComponent/SelectComponent';\nimport './InputLayout.css';\n\nclass InputLayout extends Component {\n  state = {\n    countries: [],\n    getCountriesError: false,\n    startYear: new Date().getFullYear(),\n  };\n\n  componentDidMount() {\n    fetch(\n      'https://cors-anywhere.herokuapp.com/https://date.nager.at/Api/v2/AvailableCountries'\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        const countriesData = data.map((item) => {\n          // console.log(item);\n          return `${item.value} - ${item.key}`;\n        });\n        this.setState({ countries: countriesData });\n      })\n      .catch((error) => {\n        this.setState({ getCountriesError: true });\n      });\n  }\n\n  render() {\n    let data = (\n      <div className={'InputLayout'}>\n        <p>Please select country and year</p>\n        <div className={'SelectGroup'}>\n          <div>\n            <span>Countries</span>\n            <SelectComponent\n              defaultValue={null}\n              data={this.state.countries}\n              changed={this.props.changed}\n              altClass={'country'}\n            />\n          </div>\n          <div>\n            <span>Years</span>\n            <SelectComponent\n              defaultValue={this.state.startYear}\n              data={this.state.startYear}\n              changed={this.props.changed}\n              altClass={'year'}\n            />\n          </div>\n        </div>\n        <button onClick={this.props.clicked}>Get Holidays</button>\n      </div>\n    );\n    if (this.state.getCountriesError)\n      data = <p>Something went wrong, try again later!</p>;\n    return data;\n  }\n}\n\nexport default InputLayout;\n","import React from 'react';\nimport './Holiday.css';\n\nconst holiday = (props) => {\n  const currentYear =\n    new Date(props.date).getFullYear() === new Date().getFullYear();\n  const currentMonth =\n    new Date(props.date).getMonth() === new Date().getMonth();\n  const font = currentYear && currentMonth ? 'bold' : 400;\n  return (\n    <div className={'Holiday'}>\n      <h3>\n        {props.name}({props.localName})\n      </h3>\n      <p style={{ fontWeight: font }}>{props.date}</p>\n    </div>\n  );\n};\nexport default holiday;\n","import React from 'react';\nimport Holiday from './Holiday/Holiday';\n\nconst holidays = (props) => {\n  let outputData = null;\n  if (props.error) {\n    outputData = <p>Something went wrong, try again later</p>;\n  } else {\n    outputData = props.holidaysData.map((holiday) => {\n      return (\n        <Holiday\n          key={holiday.name + holiday.date}\n          name={holiday.name}\n          localName={holiday.localName}\n          date={holiday.date}\n        />\n      );\n    });\n  }\n  return <div>{outputData}</div>;\n};\n\nexport default holidays;\n","import React, { Component } from 'react';\nimport './App.css';\nimport InputLayout from './components/InputLayout/InputLayout';\nimport Holidays from './components/Holidays/Holidays';\n\nclass App extends Component {\n  state = {\n    selectedCountry: '',\n    selectedYear: new Date().getFullYear(),\n    holidays: [],\n    getHolidaysError: false,\n  };\n\n  selectedChangeHandler = (event) => {\n    if (event.target.classList.contains('country')) {\n      this.setState({ selectedCountry: event.target.value });\n    } else {\n      this.setState({ selectedYear: event.target.value });\n    }\n  };\n\n  getHolidaysHandler = (event) => {\n    if (this.state.selectedCountry !== '') {\n      fetch(\n        `https://cors-anywhere.herokuapp.com/https://date.nager.at/api/v2/publicholidays/${this.state.selectedYear}/${this.state.selectedCountry}`\n      )\n        .then((response) => response.json())\n        .then((data) => {\n          const holidaysData = data.map((holiday) => {\n            // console.log(item);\n            return {\n              date: holiday.date,\n              localName: holiday.localName,\n              name: holiday.name,\n            };\n          });\n          this.setState({ holidays: holidaysData });\n        })\n        .catch((error) => {\n          this.setState({ getHolidaysError: true });\n        });\n    } else alert('Country must be selected');\n  };\n\n  render() {\n    return (\n      <div className='App'>\n        <h1>Holiday Lister App</h1>\n        <InputLayout\n          changed={this.selectedChangeHandler}\n          clicked={this.getHolidaysHandler}\n        />\n        <Holidays\n          error={this.state.getHolidaysError}\n          holidaysData={this.state.holidays}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}